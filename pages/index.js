import Head from 'next/head'
import {container, main} from '../styles/Home.module.css'
import Profile from "../components/Profile";
import Modal from "../components/Modal";
import {useState} from "react";
import modalStyles from "../styles/Modal.module.css";
import db from "../firebaseDb/firebaseAdmin";
import About from "../components/section/About";
import Projects from "../components/section/Projects";
import Contact from "../components/section/Contact";
import EducationsSection from "../components/EducationsSection";
import ExperiencesSection from "../components/ExperiencesSection";
import CertificationsSection from "../components/CertificationsSection";
import SkillsSection from "../components/SkillsSection";
import TestimonialsSection from "../components/TestimonialsSection";

export async function getStaticProps(context) {
	try {
		let projects = [], profile = {}
		
		const profileCollectionRef = db.collection("profile").limit(1);
		const profileSnapshot = await profileCollectionRef.get();
		if (!profileSnapshot.empty) {
			const profileDoc = profileSnapshot.docs[0];
			profile = {id: profileDoc.id, ...profileDoc.data()}
			const linksRef = await db.collection(`profile/${profileDoc.id}/links`).get();
			const links = linksRef.docs.map(link => {
				return {id: link.id, ...link.data()}
			})
			
			profile.links = await Promise.all(links);
		}
		const collectionRef = db.collection("projects");
		const snapshots = await collectionRef.get();
		if (!snapshots.empty) {
			projects = snapshots.docs.map(async project => {
				const linksRef = await db.collection(`projects/${project.id}/links`).get();
				const links = linksRef.docs.map(link => {
					return {id: link.id, ...link.data()}
				})
				
				
				const imagesRef = await db.collection(`projects/${project.id}/images`).get();
				const images = imagesRef.docs.map(image => {
					return {id: image.id, ...image.data()}
				})
				
				return {id: project.id, ...project.data(), links: links, images: images};
			});
		}
		
		projects = await Promise.all(projects);

		
		
		const docs = ["experiences", "educations","certifications", "skills", "testimonials"]
		const docRes = async (doc) => {
			const docRef = db.collection(doc);
			const docSnap = await docRef.get();
			if (!docSnap.empty) {
				return docSnap.docs.reverse().map(collection => {
					return {id: collection.id, ...collection.data()};
				})
			}
			return []
		}
		const docMapped = docs.map(async (doc) => {
			return {[doc]: await docRes(doc)}
		});
		const docMappedRes = await Promise.all(docMapped);
		const docResults = docs.reduce((acc, doc, index) => ({
			...acc, [doc]: docMappedRes[index][doc]
		}), {});
		const {experiences, educations, certifications, skills, testimonials} = docResults
		
		
		return {
			props: {projects, profile, experiences, educations, certifications, docResults, skills, testimonials},
			revalidate: 60
		}
		
	} catch (e) {
		return {
			props: {projects: [], profile: null, experiences: [], educations: [], certifications: [], skills: []}, // will be passed to the page component as props
		}
	}
}

export default function Home({
	                             projects = [],
	                             profile = null,
	                             experiences,
	                             educations,
	                             certifications,
	                             skills, testimonials
                             }) {
	
	const [modalOpen, setModalOpen] = useState(false);
	const [currentTab, setCurrentTab] = useState('about');
	const [selectedItem, setSelectedItem] = useState(null);
	const handleSelectedItem = (project) => {
		setSelectedItem(project)
		setModalOpen(true)
	}
	const handleModalClose = (value) => {
		setModalOpen(false)
		setSelectedItem(null)
	}
	
	const handleTabSelection = (value) => {
		setCurrentTab(value)
	}
	const checkActiveTab = (value) => {
		return currentTab === value ? 'active' : ''
	}
	const hideOrShowTabSection = (value) => {
		return currentTab !== value ? ' d-none' : ''
	}
	
	return (
			<>
				<Head key={"main"}>
					{
						profile ? <title>{profile.firstName + " " + profile.lastName}</title> : null
						
					}
					{/*<meta name="description" content="Generated by create next app"/>*/}
					<link rel="icon" href="/favicon.ico"/>
				</Head>
				<main className={main}>
					<header className={"w-100"}>
						<div className={"tabs"}>
							<button type={"button"} role={"tab"} className={`tab-item ${checkActiveTab("about")}`}
							        onClick={() => handleTabSelection('about')}>About
							</button>
							<button type={"button"} role={"tab"} className={`tab-item ${checkActiveTab("projects")}`}
							        onClick={() => handleTabSelection('projects')}>Projects
							</button>
							<button type={"button"} role={"tab"} className={`tab-item ${checkActiveTab("blog")}`}
							        onClick={() => handleTabSelection('blog')}>Blog
							</button>
							<button type={"button"} role={"tab"} className={`tab-item ${checkActiveTab("contact")}`}
							        onClick={() => handleTabSelection('contact')}>Contact
							</button>
						</div>
					</header>
					<Profile profile={profile}/>
					
					<div className="container overflow-hidden px-0">
						
						{
							(
									() => {
										switch (currentTab) {
											case "projects":
												return (
														<>
															<Projects projects={projects} handleSelectedItem={handleSelectedItem}/>
														</>
												)
											case "blog":
												return (
														<>
															<div className={"d-flex align-center justify-center"}
															     style={{minHeight: "10rem"}}>
																<h4>Coming Soon</h4>
															</div>
														</>
												)
											case "contact":
												return (
														<>
															<Contact/>
														</>
												)
											case "about":
											default:
												return (
														<>
															<About profile={profile}/>
															<ExperiencesSection className={"border-bottom mb-3"} experiences={experiences}/>
															<EducationsSection className={"border-bottom mb-3"} educations={educations}/>
															<CertificationsSection className={"border-bottom mb-3"} certifications={certifications}/>
															<SkillsSection className={"border-bottom mb-3"} skills={skills}/>
															<TestimonialsSection className={"border-bottom mb-3"} testimonials={testimonials}/>
														</>
												)
											
										}
									}
							)()
						}
					</div>
					
					{
						selectedItem ?
								(
										<Modal title={selectedItem.title} modalValue={modalOpen} closeModal={handleModalClose}>
											<div className={modalStyles.modalLinks}>
												<div className={"d-flex flex-column"}>
													{
														selectedItem.links.map((item, index) => {
															return (<a rel={"noreferrer"} href={item.url} target={"_blank"} key={index}>
																<i className={item.icon + " la-2x mb-2"}/>
															</a>)
														})
													}
												</div>
											</div>
											<div className={"d-flex flex-column"} style={{
												borderBottomLeftRadius: "10px",
												borderBottomRightRadius: "10px",
												overflow: 'hidden'
											}}>
												{
														selectedItem.images && selectedItem.images.filter(item => !item.isThumbnail).map((item, index) => {
															return <img className={modalStyles.modalImage} src={item.url} key={index} loading={"lazy"}
															            alt={selectedItem.title + ' ' + index}/>
														})
												}
											</div>
										
										
										</Modal>
								) : null
					}
				
				</main>
			
			</>
	)
}
