import Head from 'next/head'
import {container, main} from '../styles/Home.module.css'
import Profile from "../components/Profile";
import Card from "../components/Card";
import Modal from "../components/Modal";
import {useState} from "react";
import modalStyles from "../styles/Modal.module.css";
import {collection, getDocs, limit, query} from "firebase/firestore";
import {db} from "../firebase/firebaseClient";

export async function getStaticProps(context) {
	try {
		let projects = [], profile = {}
		
		const profileCollectionRef = collection(db, "profile");
		const profileSnapshot = await getDocs(query(profileCollectionRef, limit(1)));
		
		if (!profileSnapshot.empty) {
			const profileDoc = profileSnapshot.docs[0];
			profile = {id: profileDoc.id, ...profileDoc.data()}
			const linksRef = await getDocs(collection(db, 'profile', profileDoc.id, 'links'));
			
			const links = linksRef.docs.map(link => {
				return {id: link.id, ...link.data()}
			})
			profile.links = await Promise.all(links);
		}
		
		const collectionRef = collection(db, "projects");
		const snapshots = await getDocs(collectionRef);
		if (!snapshots.empty) {
			projects = snapshots.docs.map(async project => {
				const linksRef = await getDocs(collection(db, 'projects', project.id, 'links'));
				const links = linksRef.docs.map(link => {
					return {id: link.id, ...link.data()}
				})
				
				const imagesRef = await getDocs(collection(db, 'projects', project.id, 'images'));
				const images = imagesRef.docs.map(image => {
					return {id: image.id, ...image.data()}
				})
				
				return {id: project.id, ...project.data(), links: links, images: images};
			});
			projects = await Promise.all(projects);
			
		}
		
		return {
			props: {projects: projects, profile: profile}
		}
		
	} catch (e) {
		return {
			props: {projects: [], profile: null}, // will be passed to the page component as props
		}
	}
}

export default function Home({projects = [], profile = null}) {
	const [modalOpen, setModalOpen] = useState(false);
	const [currentTab, setCurrentTab] = useState('projects');
	const [selectedItem, setSelectedItem] = useState(null);
	const handleSelectedItem = (project) => {
		setSelectedItem(project)
		setModalOpen(true)
	}
	const handleModalClose = (value) => {
		setModalOpen(false)
		setSelectedItem(null)
	}
	
	const handleTabSelection = (value) => {
		setCurrentTab(value)
	}
	const checkActiveTab = (value) => {
		return currentTab === value ? 'active' : ''
	}
	
	return (
			<>
				<Head>
					{
						profile ? <title>{profile.firstName + " " + profile.lastName}</title> : null
						
					}
					{/*<meta name="description" content="Generated by create next app"/>*/}
					<link rel="icon" href="/favicon.ico"/>
				</Head>
				<main className={main}>
					<Profile profile={profile}/>
					
					<div className="container overflow-hidden">
						<div className={"tabs"}>
							<a href="#" className={`tab-item ${checkActiveTab("projects")}`}
							   onClick={() => handleTabSelection('projects')}>Projects</a>
							<a href="#" className={`tab-item ${checkActiveTab("blogs")}`}
							   onClick={() => handleTabSelection('blogs')}>Blogs</a>
						</div>
						{
							currentTab === "projects" ?
									<div className={"row gx-5"}>
										{
											projects.map((project, index) =>
													<div className={`col-md-6 mb-4`} key={index}>
														<a href={"#"} onClick={(event) => {
															event.preventDefault()
															handleSelectedItem(project)
														}}>
															<Card maxWidth={"100%"} className={"mx-auto mb-3"}
															      imgSrc={project.thumbnail && project.thumbnail.length ? project.thumbnail[0].url : project.images[0].url}
															      alt={project.title}
															/>
															<h4 className={"mb-0"}>{project.title}</h4>
														</a>
													
													</div>
											)
										}
									</div>
									:
									<div className={"d-flex align-center justify-center"} style={{minHeight: "10rem"}}>
										<h4>Coming Soon</h4>
									</div>
						}
					</div>
					
					{
						selectedItem ?
								(
										<Modal title={selectedItem.title} modalValue={modalOpen} closeModal={handleModalClose}>
											<div className={modalStyles.modalLinks}>
												<div className={"d-flex flex-column"}>
													{
														selectedItem.links.map((item, index) => {
															return (<a rel={"noreferrer"} href={item.url} target={"_blank"} key={index}>
																<i className={item.icon + " la-2x mb-2"}/>
															</a>)
														})
													}
												</div>
											</div>
											<div className={"d-flex flex-column"} style={{
												borderBottomLeftRadius: "10px",
												borderBottomRightRadius: "10px",
												overflow: 'hidden'
											}}>
												{
													selectedItem.images && selectedItem.images.map((item, index) => {
														return <img className={modalStyles.modalImage} src={item.url} key={index}
														            alt={selectedItem.title + ' ' + index}/>
													})
												}
											</div>
										
										
										</Modal>
								) : null
					}
				
				</main>
			
			</>
	)
}
